//
//  main.cpp
//  Practice Problem 28_1
//
//  Created by 류수운 on 6/5/16.
//  Copyright © 2016 Suewoon Ryu. All rights reserved.
//

#include <iostream>
#include <fstream>
#include <string> 

using namespace std;

struct PlayerRecord{
    int age;
    int score;
    string name;
};

int main(){
    //wrtie into a file
    
    PlayerRecord rec;
    rec.age = 11;
    rec.score = 200;
    rec.name = "John";
    
    fstream a_file("records.bin",ios::binary|ios::out|ios::in|ios::trunc);
    
    a_file.write(reinterpret_cast<char*>(&rec.age), sizeof(rec.age));
    a_file.write(reinterpret_cast<char*>(&rec.score), sizeof(rec.score));
    int len = static_cast<int>(rec.name.length());
    a_file.write(reinterpret_cast<char*>(&len), sizeof(len));
    //cant pass a pointer to a string bc we dont know the layout of a string object, it may contain
    //pointers that would be written into the file
    a_file.write(rec.name.c_str(), len+1);
    
    PlayerRecord in_rec;
    
    a_file.seekg(0, ios::beg);
    
    //read age
    if(!a_file.read(reinterpret_cast<char*>(&in_rec.age), sizeof(in_rec.age))){
        cout<<"Error reading from file"<<endl;
        return 1;
    }
    
    //read score 
    if(!a_file.read(reinterpret_cast<char*>(&in_rec.score), sizeof(in_rec.score))){
        cout<<"Error reading from file"<<endl;
        return 1;
    }
    
    int str_len;
    
    if (!a_file.read(reinterpret_cast<char*>(&str_len), sizeof(str_len)))
    {
        cout<<"error reading from file"<<endl;
    }
    
    //perform a sanity check to ensure we dont try to allocate too much memory
    
    if (str_len>0 && str_len<10000) {
        char *p_str_buf = new char[str_len +1];
        if (!a_file.read(p_str_buf,str_len+1)) {
            delete[] p_str_buf;
            cout<<"error reading from file "<<endl;
            return 1;
        }
        if (p_str_buf[str_len]==0) {
            in_rec.name=string(p_str_buf);
        }
        delete [] p_str_buf ;
    }
    cout<<in_rec.age<<" "<<in_rec.score<< " " <<in_rec.name
    <<endl;
}
